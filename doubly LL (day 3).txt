#include<iostream>
using namespace std;

class Node{
public:
int data;
Node* prev;
Node* next;
// constructor
Node()
{
  this->data = 0;
  this-> prev = NULL;
  this->next = NULL;
}
Node(int data)
{
  this->data = data;
  this-> prev = NULL;
  this->next = NULL;
}
};


int getLength(Node* head)
{
  int len =0;
  Node* temp = head;

  while(temp!=NULL)
    {
      temp = temp->next;
      len++;
    }
  return len;
}

void insertAtHead(Node* &head,Node* &tail , int data)
{
  if(head==NULL)
  {
    Node* newNode = new Node(data);
    head = newNode;
    tail = newNode;
    return;
  }
   Node* newNode = new Node(data);
  newNode->next = head;
  head->prev = newNode;
  head = newNode;  
}

void insertAtTail(Node* &head , Node* &tail , int data)
{
  if(head==NULL)
  {
    Node* newNode = new Node(data);
    head = newNode;
    tail = newNode;
    return;
  }
   Node* newNode = new Node(data);
  tail->next = newNode;
  newNode->prev = tail;
  tail = newNode; 
}

void insertAtPosition(int position , Node* &head , Node* &tail , int data)
{
  if(head==NULL)
  {
    Node* newNode = new Node(data);
    tail = newNode;
    head = newNode;
  }

   // LL is not emepty
  else
  {
    if(position == 1)
    {
      insertAtHead(head , tail , data);
      return;
    }
    int len = getLength(head);
    if(position > len)
    {
      insertAtTail(head,tail,data);
      return;
    }
    // insert at middle
     // step 1 find prev and curr
    int i =1;
    Node* prevNode = head;
    while(i<position-1)
      {
        prevNode=prevNode->next;
        i++;
      }
    Node* curr = prevNode->next;

    // step 2 ;
    Node* newNode = new Node(data);
    // step 3
    prevNode->next = newNode;
    newNode->prev=prevNode;
    curr->prev=newNode;
    newNode->next=curr;    
  }

}

void delete(Node* &head , Node* &tail,int position)
{
  if(head == NULL)
  {
    cout<<"Linked list is empty";
    return;
  }
  // if linked list has one node
  if(head-> next == NULL)
  {
    Node* temp = head;
    head = NULL;
    tail = NULL;
    delete temp;
    return;
  }
  if(position > len)
  {
    cout<<"enter valid position";
  }
  //
  if(position == 1)
  {
    // want to dekte the first node
    Node* temp = head;
    head = head->next;
    head->prev=NULL;
    temp->next=NULL;
    delete temp;
    return;
  }
  int len = getLength(head)
  if(position == len)
  {
    Node* temp = tail;
    tail = tail->prev;
    temp->prev = NULL;
    tail->next = NULL;
    delete temp;
    return;
  }
  // dleete in any position
  // step1: find left,right and curr
  int i = 1;
  Node*left=head;
  while(i<position-1)
    {
      left = left->next;
      i++;
    } 
  Node* curr = left->next;
  Node* right = curr->next;

  // step 2 
  left->next=right;
  //step 3
  right->prev=left;
  curr->next=NULL;
  curr->prev =NULL;
  delete curr;
}


void print(Node* &head)
{
  Node* temp = head;
  while(temp!=NULL)
    {
      cout<<temp->data;
      temp = temp->next;
    }
}


int main()
{
  Node* head = NULL;
  Node* tail = NULL;
  insertAtHead(head,tail, 40);
  print(head);
  
}