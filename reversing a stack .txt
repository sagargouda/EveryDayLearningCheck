// reverse a stack 

time complexity = 0(n*n)
space = o(n)

#include <iostream>
#include<stack>
using namespace std;

void insertAtBottom(stack<int>&st,int target)
{
  if(st.empty())
  {
    st.push(target);
    return;
  }
  int topElement = st.top();
  st.pop();
  insertAtBottom(st,target);
  st.push(topElement);
}

void reverseStack(stack<int>&st)
{
 // base case
 if(st.empty())
 {
   return;
 }

  int target = st.top();
  st.pop();

  // revrse stack
  reverseStack(st);
  // insert at bottom
  insertAtBottom(st,target);
}

int main()
{
  stack<int>st;
  st.push(10);
  st.push(20);
  st.push(30);
  st.push(40);
  st.push(50);
  st.push(60);

  reverseStack(st);

  while(!st.empty())
    {
      cout<<st.top()<<' ';
      st.pop();
    }
}