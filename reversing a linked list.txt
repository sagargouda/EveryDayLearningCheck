// reversing a linked list

#include<iostream>
using namespace std;
class Node{
public:
int data;
Node* next;

// constructor
Node(int data)
{
  this->data = data;
  this->next = NULL;
}
};

void print(Node* first)
{
  Node* temp = first;
  while(temp != NULL)
    {
      cout<<temp->data<<" ";
      temp = temp->next;
    }
}

Node* reverse(Node* &prev , Node* &curr)
{
  // base case 
  if(curr == NULL)
  {
    return prev;
  }

  Node* forward = curr->next;

  curr->next = prev;

  return reverse(curr,forward);
  
}

int main()
{
  Node* first = new Node(67);
  Node* second = new Node(77);
  Node* third = new Node(87);
  Node* fourth = new Node(97);
  Node* fifth = new Node(107);
  Node* sixth = new Node(117);

  first->next = second;
  second->next = third;
  third->next = fourth;
  fourth->next = fifth;
  fifth->next = sixth;

  print(first);
  cout<<endl;
  cout<<endl;
  cout<<endl;

  Node* prev = NULL;
  Node* curr = first;

  first = reverse(prev , curr);
  print(first);
}